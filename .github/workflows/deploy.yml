name: orderweb

on:
  workflow_dispatch:     
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'
    
    - name: Build orderweb
      run: docker build . --file orderweb/Dockerfile --tag "jakob.azurecr.io/orderweb:$GITHUB_RUN_NUMBER"
      
    - name: Build orderapi
      run: docker build . --file orderapi/Dockerfile --tag "jakob.azurecr.io/orderapi:$GITHUB_RUN_NUMBER"
      
    - name: Build orderprocessor
      run: docker build . --file orderprocessor/Dockerfile --tag "jakob.azurecr.io/orderprocessor:$GITHUB_RUN_NUMBER"
      
    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        # Container registry username
        username: jakob
        # Container registry password
        password: ${{ secrets.ACR_PASSWORD }}
        # Container registry server url
        login-server: jakob.azurecr.io
        
    - name: Push orderweb
      run: docker push "jakob.azurecr.io/orderweb:$GITHUB_RUN_NUMBER"
      
    - name: Push orderapi
      run: docker push "jakob.azurecr.io/orderapi:$GITHUB_RUN_NUMBER"
      
    - name: Push orderprocessor
      run: docker push "jakob.azurecr.io/orderprocessor:$GITHUB_RUN_NUMBER"      
      
  deploytest:
    name: deploy test
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'    
    environment: 
      name: orderweb-test
    env:
      resourceGroup: orderweb-test
      location: westeurope
      logAnalyticsWorkspace: orderwebtest-logs
      containerAppEnvironment: orderweb-test
      cosmosUrl: "https://daprstate.documents.azure.com:443/"
      cosmosCollection: orders
    steps:
    - uses: actions/checkout@v3

    - uses: sandersaares-actions/expand-tokens@master
      env:
        COSMOSURL: "https://daprstate.documents.azure.com:443/"
        COSMOSMASTERKEY: ${{ secrets.COSMOS_MASTERKEY }}
        COSMOSCOLLECTION: orders
        COSMOSDATABASE: daprdemo
        PUBSUBCONNECTIONSTRING: "${{ secrets.PUBSUB_CONNECTIONSTRING }}"
      with:
        path: deployment/containerapps/bicep

    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true 
            
    - name: Get existing image version
      id: getimages
      run: |
          echo "Installing containerapp extension"
          echo $resourceGroup
          az extension add -n containerapp --yes
          containerImage=$(az containerapp show --name orderweb --resource-group $resourceGroup --query "properties.template.containers[0].image" -o tsv)
          IFS=';' read -ra imageArray <<< "$containerImage"
          echo ${imageArray[1]}  
          echo "::set-output name=imageVersion::${imageArray[1]}"
    
    - name: Deploy Bicep Template
      uses: azure/arm-deploy@v1
      with:
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ env.resourceGroup}}
        template: ./deployment/containerapps/bicep/main.bicep
        deploymentMode: Incremental
        parameters: version=${{ steps.getimages.outputs.imageVersion }} location=$env:location environment=$env:containerAppEnvironment        

    - name: Get current revision name
      id: getcurrentrevisionname
      run: |
        az extension add -n containerapp --yes
        currentRevision=$(az containerapp revision list -g $resourceGroup -n orderweb --query 'reverse(sort_by([].{Revision:name,Replicas:properties.replicas,Active:properties.active,Created:properties.createdTime,FQDN:properties.fqdn}[?Active!=`false`], &Created))| [0].Revision' -o tsv)
        echo "::set-output name=currentRevision::$currentRevision"

    - name: 'Deploy to Blue Slot'
      uses: Azure/cli@v1
      with:
        inlineScript: |
          echo "Installing containerapp extension"
          az extension add -n containerapp --yes
          echo "Creating Blue Slot"
          az containerapp revision copy -n orderweb -g $resourceGroup -i jakob.azurecr.io/orderweb:${{ github.run_number }}
          az containerapp ingress traffic set -n store-product-api -g $resourceGroup --revision-weight ${{ steps.getcurrentrevisionname.outputs.currentRevision }}=100
      
    - name: 'Get Blue Slot URL'
      id: getbluesloturl
      run: |
        echo "Installing containerapp extension"
        az extension add -n containerapp --yes
        bluesloturl=$(az containerapp revision list -g $resourceGroup -n orderweb --query 'reverse(sort_by([].{Revision:name,Replicas:properties.replicas,Active:properties.active,Created:properties.createdTime,FQDN:properties.fqdn}[?Active!=`false`], &Created))| [0].FQDN' -o tsv)
        echo "::set-output name=bluesloturl::$bluesloturl"
  
  deployprod:
    name: deploy prod
    needs: deploytest
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'    
    environment: 
      name: orderweb-prod
    env:
      resourceGroup: orderweb-prod
      location: westeurope
      logAnalyticsWorkspace: orderwebprod-logs
      containerAppEnvironment: orderweb-prod
      cosmosUrl: https://daprstate.documents.azure.com:443/
      cosmosCollection: ordersProd
    steps:
    - uses: actions/checkout@v3

    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - uses: sandersaares-actions/expand-tokens@master
      env:
        COSMOSURL: "https://daprstate.documents.azure.com:443/"
        COSMOSMASTERKEY: ${{ secrets.COSMOS_MASTERKEY }}
        COSMOSCOLLECTION: ordersprod
        COSMOSDATABASE: daprdemo
        PUBSUBCONNECTIONSTRING: "${{ secrets.PUBSUB_CONNECTIONSTRING }}"
      with:
        path: deployment/containerapps/bicep

    - name: Get existing image version
      id: getimages
      run: |
          echo "Installing containerapp extension"
          az extension add -n containerapp --yes
          containerImage=$(az containerapp show --name orderweb --resource-group $resourceGroup --query "properties.template.containers[0].image" -o tsv)  
          echo "::set-output name=containerImage::$containerImage"
  
    - name: Deploy Bicep Template
      uses: azure/arm-deploy@v1
      with:
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ env.resourceGroup}}
        template: ./deployment/containerapps/bicep/main.bicep
        deploymentMode: Incremental
        parameters: version=${{ steps.getimages.outputs.containerImage }} location=$env:location environment=$env:containerAppEnvironment        

    - name: Get current revision name
      id: getcurrentrevisionname
      run: |
        az extension add -n containerapp --yes
        currentRevision=$(az containerapp revision list -g $resourceGroup -n orderweb --query 'reverse(sort_by([].{Revision:name,Replicas:properties.replicas,Active:properties.active,Created:properties.createdTime,FQDN:properties.fqdn}[?Active!=`false`], &Created))| [0].Revision' -o tsv)
        echo "::set-output name=currentRevision::$currentRevision"

    - name: 'Deploy to Blue Slot'
      uses: Azure/cli@v1
      with:
        inlineScript: |
          echo "Installing containerapp extension"
          az extension add -n containerapp --yes
          echo "Creating Blue Slot"
          az containerapp revision copy -n orderweb -g $resourceGroup -i jakob.azurecr.io/orderweb:${{ github.run_number }}
          az containerapp ingress traffic set -n store-product-api -g $resourceGroup --revision-weight ${{ steps.getcurrentrevisionname.outputs.currentRevision }}=100
      
    - name: 'Get Blue Slot URL'
      id: getbluesloturl
      run: |
        echo "Installing containerapp extension"
        az extension add -n containerapp --yes
        bluesloturl=$(az containerapp revision list -g $resourceGroup -n orderweb --query 'reverse(sort_by([].{Revision:name,Replicas:properties.replicas,Active:properties.active,Created:properties.createdTime,FQDN:properties.fqdn}[?Active!=`false`], &Created))| [0].FQDN' -o tsv)
        echo "::set-output name=bluesloturl::$bluesloturl"




